import{R as l}from"./index-BITXxDgh.js";const S=t=>{let n;const e=new Set,c=(r,u)=>{const s=typeof r=="function"?r(n):r;if(!Object.is(s,n)){const f=n;n=u??(typeof s!="object"||s===null)?s:Object.assign({},n,s),e.forEach(b=>b(n,f))}},a=()=>n,i={setState:c,getState:a,getInitialState:()=>y,subscribe:r=>(e.add(r),()=>e.delete(r))},y=n=t(c,a,i);return i},q=t=>t?S(t):S,g=t=>t;function x(t,n=g){const e=l.useSyncExternalStore(t.subscribe,()=>n(t.getState()),()=>n(t.getInitialState()));return l.useDebugValue(e),e}const d=t=>{const n=q(t),e=c=>x(n,c);return Object.assign(e,n),e},I=t=>t?d(t):d,O=I((t,n)=>({cart:[],addToCart:e=>{const c=n().cart.find(a=>a.id===e.id);t(c?{cart:n().cart.map(a=>a.id===e.id?{...a,quantity:a.quantity+1}:a)}:{cart:[...n().cart,{...e,quantity:1}]})},removeFromCart:e=>{t({cart:n().cart.filter(c=>c.id!==e)})},changeQuantity:(e,c)=>{t({cart:n().cart.map(a=>{if(a.id===e){const o=c==="increase"?a.quantity+1:Math.max(0,a.quantity-1);return{...a,quantity:o}}return a}).filter(a=>a.quantity>0)})},clearCart:()=>t({cart:[]})}));export{O as u};
